devtools::check()
usethis::use_mit_license("Nicolas Nguyen")
devtools::check()
usethis::use_r("proj_inv")
devtools::load_all
devtools::load_all()
library(readr)
Blueprint_DB <- read_csv("C:/Users/PR048069/OneDrive - PERNOD RICARD/Desktop/Blueprint_DB.csv",
col_types = cols(Period = col_date(format = "%m/%d/%Y")))
View(Blueprint_DB)
df2 <- proj_inv(data = Blueprint_DB,
DFU = DFU,
Period = Period,
Demand =  Demand,
Opening.Inventories = Opening.Inventories,
Supply.Plan = Supply.Plan,
Min.Stocks.Coverage = Min.Stocks.Coverage,
Max.Stocks.Coverage = Max.Stocks.Coverage)
View(df2)
devtools::document()
?proj_inv
devtools::check()
devtools::document()
devtools::document()
devtools::check()
usethis::use_package("dplyr")
usethis::use_package("RcppRoll")
devtools::check()
usethis::use_pipe()
devtools::document()
devtools::check()
?runif
devtools::document()
devtools::check()
View(Blueprint_DB)
usethis::use_data(Blueprint_DB)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(planr)
devtools::check()
Blueprint_DB
library(readr)
blueprint_light <- read_csv("C:/Users/PR048069/OneDrive - PERNOD RICARD/Desktop/blueprint_light.csv",
col_types = cols(Period = col_date(format = "%m/%d/%Y")))
View(blueprint_light)
usethis::use_data(blueprint_light)
devtools::load_all()
light_proj_inv(dataset = blueprint_light, DFU = DFU, Period = Period, Demand =  Demand, Opening.Inventories = Opening.Inventories, Supply.Plan = Supply.Plan)
devtools::document()
?light_proj_inv
devtools::check()
devtools::check()
?blueprint_light
?blueprint_light
?Blueprint_DB
devtools::check()
?blueprint_light
library(readr)
blueprint <- read_csv("C:/Users/PR048069/OneDrive - PERNOD RICARD/Desktop/blueprint.csv",
col_types = cols(Period = col_date(format = "%m/%d/%Y")))
View(blueprint)
usethis::use_data(blueprint)
proj_inv(dataset = bluerint, DFU = DFU, Period = Period, Demand =  Demand, Opening.Inventories = Opening.Inventories, Supply.Plan = Supply.Plan, Min.Stocks.Coverage = Min.Stocks.Coverage, Max.Stocks.Coverage = Max.Stocks.Coverage)
proj_inv(dataset = blueprint, DFU = DFU, Period = Period, Demand =  Demand, Opening.Inventories = Opening.Inventories, Supply.Plan = Supply.Plan, Min.Stocks.Coverage = Min.Stocks.Coverage, Max.Stocks.Coverage = Max.Stocks.Coverage)
devtools::check()
devtools::check()
library(readr)
blueprint_drp <- read_csv("C:/Users/PR048069/OneDrive - PERNOD RICARD/Desktop/blueprint_drp.csv",
col_types = cols(Period = col_date(format = "%m/%d/%Y")))
View(blueprint_drp)
usethis::use_data(blueprint_drp)
usethis::use_r("drp")
drp(dataset = blueprint_drp, DFU = DFU, Period = Period, Demand =  Demand, Opening.Inventories = Opening.Inventories, Supply.Plan = Supply.Plan, SSCov = SSCov, DRPCovDur = DRPCovDur, Reorder.Qty = Reorder.Qty, DRP.Grid = DRP.Grid)
?drp
?light_proj_inv
devtools::check()
?drp
drp(dataset = blueprint_drp, DFU = DFU, Period = Period, Demand =  Demand, Opening.Inventories = Opening.Inventories, Supply.Plan = Supply.Plan, SSCov = SSCov, DRPCovDur = DRPCovDur, Reorder.Qty = Reorder.Qty, DRP.Grid = DRP.Grid)
?blueprint_drp
?light_proj_inv
usethis::use_vignette("my-vignette")
?planr
??planr
library(planr)
glimpse(blueprint_light)
head(blueprint_light)
df1 <- light_proj_inv(dataset = blueprint_light, DFU = DFU, Period = Period, Demand =  Demand, Opening.Inventories = Opening.Inventories, Supply.Plan = Supply.Plan)
head(df1)
View(df1)
Calculated_PI_DB <- light_proj_inv(dataset = blueprint_light, DFU = DFU, Period = Period, Demand =  Demand, Opening.Inventories = Opening.Inventories, Supply.Plan = Supply.Plan)
head(Calculated_PI_DB)
# Select Item 000008
Selection_PI_DB <- filter(Calculated_PI_DB, Calculated_PI_DB$DFU == 'Item 000008')
View(Calculated_PI_DB)
# Select Item 000008
Selection_PI_DB <- filter(Calculated_PI_DB, Calculated_PI_DB$DFU == "Item 000008")
# Select Item 000008
Selection_PI_DB <- filter(Calculated_PI_DB, Calculated_PI_DB$DFU %in% c("Item 000008"))
Calculated_PI_DB <- as.data.frame(Calculated_PI_DB)
# Select Item 000008
Selection_PI_DB <- filter(Calculated_PI_DB, Calculated_PI_DB$DFU %in% c("Item 000008"))
Selection_PI_DB
library(reactable)
# set a working df
df1 <- Selection_PI_DB
# keep only the needed columns
df1 <- df1 %>% select(Period,
Demand,
Calculated.Coverage.in.Periods,
Projected.Inventories.Qty,
Supply.Plan)
# create a f_colorpal field
df1 <- df1 %>% mutate(f_colorpal = case_when( Calculated.Coverage.in.Periods > 8 ~ "#FFA500",
Calculated.Coverage.in.Periods > 2 ~ "#32CD32",
Calculated.Coverage.in.Periods > 0 ~ "#FFFF99",
TRUE ~ "#FF0000" ))
reactable(df1, resizable = TRUE, showPageSizeOptions = TRUE,
striped = TRUE, highlight = TRUE, compact = TRUE,
defaultPageSize = 20,
columns = list(
Demand = colDef(
name = "Demand (units)",
cell = data_bars(df1,
fill_color = "#3fc1c9",
text_position = "outside-end"
)
),
Calculated.Coverage.in.Periods = colDef(
name = "Coverage (Periods)",
maxWidth = 90,
cell= color_tiles(df1, color_ref = "f_colorpal")
),
f_colorpal = colDef(show = FALSE), # hidden, just used for the coverages
`Projected.Inventories.Qty`= colDef(
name = "Projected Inventories (units)",
format = colFormat(separators = TRUE, digits=0),
style = function(value) {
if (value > 0) {
color <- "#008000"
} else if (value < 0) {
color <- "#e00000"
} else {
color <- "#777"
}
list(color = color
#fontWeight = "bold"
)
}
),
Supply.Plan = colDef(
name = "Supply (units)",
cell = data_bars(df1,
fill_color = "#3CB371",
text_position = "outside-end"
)
)
), # close columns lits
columnGroups = list(
colGroup(name = "Projected Inventories", columns = c("Calculated.Coverage.in.Periods",
"Projected.Inventories.Qty"))
)
) # close reactable
library(reactable)
library(reactablefmtr)
# set a working df
df1 <- Selection_PI_DB
# keep only the needed columns
df1 <- df1 %>% select(Period,
Demand,
Calculated.Coverage.in.Periods,
Projected.Inventories.Qty,
Supply.Plan)
# create a f_colorpal field
df1 <- df1 %>% mutate(f_colorpal = case_when( Calculated.Coverage.in.Periods > 8 ~ "#FFA500",
Calculated.Coverage.in.Periods > 2 ~ "#32CD32",
Calculated.Coverage.in.Periods > 0 ~ "#FFFF99",
TRUE ~ "#FF0000" ))
reactable(df1, resizable = TRUE, showPageSizeOptions = TRUE,
striped = TRUE, highlight = TRUE, compact = TRUE,
defaultPageSize = 20,
columns = list(
Demand = colDef(
name = "Demand (units)",
cell = data_bars(df1,
fill_color = "#3fc1c9",
text_position = "outside-end"
)
),
Calculated.Coverage.in.Periods = colDef(
name = "Coverage (Periods)",
maxWidth = 90,
cell= color_tiles(df1, color_ref = "f_colorpal")
),
f_colorpal = colDef(show = FALSE), # hidden, just used for the coverages
`Projected.Inventories.Qty`= colDef(
name = "Projected Inventories (units)",
format = colFormat(separators = TRUE, digits=0),
style = function(value) {
if (value > 0) {
color <- "#008000"
} else if (value < 0) {
color <- "#e00000"
} else {
color <- "#777"
}
list(color = color
#fontWeight = "bold"
)
}
),
Supply.Plan = colDef(
name = "Supply (units)",
cell = data_bars(df1,
fill_color = "#3CB371",
text_position = "outside-end"
)
)
), # close columns lits
columnGroups = list(
colGroup(name = "Projected Inventories", columns = c("Calculated.Coverage.in.Periods",
"Projected.Inventories.Qty"))
)
) # close reactable
devtools::check()
.Last.error
devtools::check()
devtools::check()
devtools::check()
View(df1)
devtools::check()
devtools::check()
?planr
browseVignettes(planr)
browseVignettes("planr")
vignette(planr)
vignette("planr")
library(planr)
help(package = 'planr', help_type = 'html')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(planr)
head(blueprint_light)
Calculated_PI_DB <- light_proj_inv(dataset = blueprint_light, DFU = DFU, Period = Period, Demand =  Demand, Opening.Inventories = Opening.Inventories, Supply.Plan = Supply.Plan)
head(Calculated_PI_DB)
Calculated_PI_DB <- as.data.frame(Calculated_PI_DB)
# Select Item 000008
Selection_PI_DB <- filter(Calculated_PI_DB, Calculated_PI_DB$DFU %in% c("Item 000008"))
Selection_PI_DB
devtools::load_all()
git remote add origin https://github.com/Nguyenic/planr
